Hardhat playlist by code-eater YT
Notes: 

"npm init" :- initilize node project
"npm install --save-dev hardhat"   :- install hardhat
"npx hardhat" :-
    select "hardhat.config.js" :- 
        will create config file for harhat
        we can choose which compiler to use for solidity 

create folder structur :- (contracts, script, test)
intsalling dependcy for test environment :-
    npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai

"npx harhat compile" :- 
    will compile the contract present in current directory 
    make sure you are in correct directory
    after compilation harhat will generate artifacts folder- that will containt the compiled information of contract (ex- ABI)

to test smart contracts :-
    import expect from chai 
    listed(describe, it) are basic nodejs method for testing:
    "describe" method :- 
        describe("description", callback fn)
        this bundles test cases
        test cases will come under call back fn
    "it" method :-
        it("description", callback)
        in call back we write the logic and then expect the expected output, using -
    "expect" method :-
        example
        expect(await hardhatToken.totalSupply()).to.equal(ownerBalance); //according to your logic and condition
    "expect().toBeRevertedWith("message")" :-
        to validate revert condition
        example:
         await expect(
            hardhatToken.connect(user1).transfer(user2.address, "10000") //from user1 to user2, doubt?? how can we tranfer from user1 as we do not own it or we do?
        ).to.be.revertedWith("Not enough balance");

    NOTE-
        -before every test case we should have deployed the contract in order to get its instance
        -we can use beforeEach(()=>{}) method, to execute commen part in before any test case
        -use ethers library to get accounts, can be used for deploying contract and pay gas
        (
            beforeEach(async function () {
                [owner, user1, user2] = await ethers.getSigners();
                Token = await ethers.getContractFactory("Token");
                hardhatToken = await Token.deploy();
            });
        )

debugging in hardhat-
    import "hardhat/console.sol" :-
        using this hardhat library we can run javascript code in solydity smart contract
    we can write "console.log()" in function and run these function when testing contract
    
deploying contract-
    - create instance of the contract and use .deploy method to deploy
        example-
        const Token = await ethers.getContractFactory("Token");
        const token = await Token.deploy();
    contract will deploy according to harhat config,
    -to deploy on ropsten, 
        add network details in hardhat config
            networks: {
                ropsten: {
                url: `https://eth-ropsten.alchemyapi.io/v2/${ALCHEMY_API_KEY}`,
                accounts: [`${ROPSTEN_PRIVATE_KEY}`],
                },
            }
    -run cli:- npx harhat deploy.js --network ropsten


>>>>>>>>>>>>> 
task-1

==>>methods to find if the caller is contract 
1. msg.sender.code.length
2. function isContract(address _address)
        public
        view
        returns (bool isSmartContract)
    {
        uint32 size;
        assembly {
            size := extcodesize(_address)
        }
        return (size > 0); //Warning: will return false if the call is made from the constructor of a smart contract
    } 

==>>how to generate code coverage in hardhat
https://medium.com/coinmonks/smart-contract-code-coverage-in-hardhat-d4a5ff6c9ba6#:~:text=Add%20solidity%2Dcoverage%20to%20hardhat,required%20inside%20your%20hardhat%20configuration.&text=Congratulations%20%F0%9F%99%8C%20from%20the%20screenshot,run%20code%20coverage%20for%20Greeter.
    

